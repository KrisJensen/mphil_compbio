
'''
This scripts scans through a range of hashed directories generated by hash_kmers.py, and runs assemblies for a range of different coverage cutoffs using a default expected coverage
'''

import numpy as np
from subprocess import call

def try_cutoffs(directory, cutoffs = np.arange(0, 25.5, 0.5)): #scan from no cutoff to a cutoff around our max coverage
	'''given the name of a hashed directory, apply different cutoffs. Results written to log'''
	for co in cutoffs:
		call(['/local/data/public/ktj21/programs/velvet/velvetg', directory, '-cov_cutoff', str(co), '-ins_length', '500']) #run velvetg. insert length 500.


if __name__ == '__main__':
	for i in range(17, 99, 2): #hardcoded kmer lengths
		try_cutoffs('kmer_'+str(i))

